@import "./responsive.scss";

@mixin set-width-height-fontsize($width: 140px, $height: 60px, $fontsize: 1.7em) {
  width: $width;
  height: $height;
  font-size: $fontsize;
}

@font-face {
  font-family: "SatansMinions";
  src: url("../fonts/satans-minions/SATAM___.TTF") format("truetype");
  font-weight: normal;
  font-style: normal;
}

* {
  font-family: SatansMinions, -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
}

html,
#app,
body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  background-color: #000;
  text-rendering: optimizeLegibility;
}

a,
.is-link {
  color: #d4312b;
  transition: color 0.2s ease-out;
  text-decoration: none;
  will-change: color;
  cursor: pointer;

  &:hover {
    color: #fd9145;
  }
}

span,
label {
  position: relative;
  font-weight: bold;
  color: #e6eaeb;
  font-size: 2em;

  @include xs() {
    font-size: 1.2em;
  }

  @include sm() {
    font-size: 1.8em;
  }

  @include md-and-up() {
    font-size: 2em;
  }

  @media screen and (min-width: 960px) and (max-width: 1030px) {
    font-size: 1.7em;
  }
}

button {
  font-size: 2em;
  position: relative;
  font-weight: bold;
  color: #e6eaeb;
  background-image: linear-gradient(to top, #d4312b 65%, #fd9145);
  width: 180px;
  height: 80px;
  border-radius: 5px;
  cursor: pointer;
  transition: opacity 0.2s ease-out;
  overflow: hidden;
  z-index: 1;
  outline: none;
  border: none;

  @include xs() {
    @include set-width-height-fontsize(100%, 44.5px, 1em);

    display: flex;
    justify-content: center;
    align-items: center;
    margin: 1em 0;
  }

  @include sm() {
    @include set-width-height-fontsize();

    margin: -2.3em 0 2em 0;
  }

  @include md-and-up() {
    @include set-width-height-fontsize();
  }

  @include lg-and-up() {
    @include set-width-height-fontsize(180px, 80px, 2em);
  }

  @include md-and-up() {
    &::after {
      content: "";
      z-index: -1;
      background-color: hsla(0, 0%, 100%, 0.2);
      position: absolute;
      top: -50%;
      bottom: -50%;
      width: 1.25em;
      transform: translateX(-565%) rotate(35deg);
    }

    &:hover {
      cursor: pointer;
    }

    &:hover::after {
      transition: transform 0.45s ease-in-out;
      transform: translateX(200%) rotate(35deg);
    }
  }
}

/* flex / alignment / spacing */

.layout {
  display: flex;
  flex-direction: row;
  flex: 1 1 auto;
  min-width: 0;
}

.column {
  flex-direction: column;
}

.wrap-row {
  flex-flow: row wrap;
}

.nowrap-row {
  flex-flow: row nowrap;
}

.nowrap-column {
  flex-flow: column nowrap;
}

.wrap-column {
  flex-flow: column wrap;
}

.align-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.justify-end {
  justify-content: flex-end;
}

.text-center {
  text-align: center;
}

.text-left {
  text-align: left;
}

.align-end {
  align-items: flex-end;
}

.spacer {
  flex-grow: 1;
}

.space-around {
  justify-content: space-around;
}

.align-right {
  text-align: right;
}

$spacer: 8px;
$types: "p", "m";
$class: padding, margin;
$directions: (
  "t": "top",
  "r": "right",
  "l": "left",
  "b": "bottom"
);

@each $type in $types {
  @each $directionAbrev, $direction in $directions {
    @for $num from 0 through 5 {
      $i: index($types, $type);

      .#{nth($types, $i)}#{$directionAbrev}-#{$num} {
        #{nth($class, $i) + '-' + $direction}: $spacer * (0.5 * $num) !important;
      }
    }
  }
}
